{"version":3,"sources":["context/store.tsx","pages/Home.tsx","pages/Login.tsx","pages/Register.tsx","pages/Discover.tsx","pages/Profile.tsx","components/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","authenticated","authType","store","createContext","dispatch","action","Provider","reducers","state","type","payload","StateProvider","props","useReducer","value","children","Home","useContext","LOGIN","gql","Login","globalState","useState","success","loginSuccess","setLoginSuccess","history","push","useMutation","update","_","data","tokenToSet","login","token","localStorage","setItem","onError","err","console","log","isNumeric","n","isNaN","parseFloat","isFinite","useEffect","pathname","className","clientId","buttonText","onSuccess","response","googleId","tokenId","onFailure","res","onClick","e","variables","email","password","Register","registeredSuccess","setRegisteredSuccess","SIGNUP","acquired","googleStatus","setGoogleStatus","useForm","register","handleSubmit","watch","errors","signUp","loading","error","name","onSubmit","formData","username","google_username","google_password","placeholder","ref","required","maxLength","validate","google_passwordmatch","profileObj","pattern","passwordmatch","Discover","GET_PROFILE_MANUAL","GET_PROFILE_GOOGLE","ProfileData","JSON","stringify","query","useQuery","getProfileManual","getProfileGoogle","Profile","Navbar","persistedAppState","parse","getItem","logout","removeItem","logoutButton","onLogoutSuccess","to","httpLink","HttpLink","uri","authLink","ApolloLink","operation","forward","setContext","headers","authorization","apolloClient","ApolloClient","link","concat","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","App","client","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAEMA,EAAe,CAAEC,eAAc,EAAOC,SAAS,MAE/CC,EAAQC,wBAAc,eACvBJ,EADsB,CAEzBK,SAAU,SAACC,QAENC,EAAYJ,EAAZI,SAGDC,EAAW,SAACC,EAAWH,GAC3B,OAAOA,EAAOI,MACZ,IAAK,QAAS,OAAO,eAChBD,EADS,CAEZR,eAAc,EACdC,SAASI,EAAOK,UAElB,IAAK,SAAU,OAAO,eACjBF,EADU,CAEbR,eAAc,EACdC,SAAU,OAEZ,QACE,OAAOO,IAKPG,EAAyB,SAACC,GAAW,IAAD,EACdC,qBAAWN,EAAUR,GADP,mBACjCS,EADiC,KAC1BJ,EAD0B,KAGxC,OAAO,kBAACE,EAAD,CAAUQ,MAAO,CAAEd,cAAcQ,EAAMR,cAAeC,SAAUO,EAAMP,SAAUG,aAAaQ,EAAMG,WCjB3FC,EAXM,SAACJ,GACFK,qBAAWf,GAG7B,OACI,6BACI,qC,oTCJZ,IA+DMgB,EAAQC,IAAH,KAiBIC,EAhFS,SAACR,GAEvB,IAAMS,EAAcJ,qBAAWf,GAFM,EAIGoB,mBAAS,CAACC,SAAQ,EAAOtB,SAAS,KAJrC,mBAI9BuB,EAJ8B,KAIhBC,EAJgB,KAKjCJ,EAAYrB,eAAgBY,EAAMc,QAAQC,KAAK,KALd,MAQbC,YAAYV,EAAO,CACzCW,OADyC,SAClCC,EADkC,GACtB,IAARC,EAAO,EAAPA,KACLC,EAAU,iBAAaD,EAAKE,MAAMC,OACtCC,aAAaC,QAAS,YAAaJ,GACnCP,EAAgB,CAACF,SAAQ,EAAMtB,SAAS,YAE1CoC,QANyC,SAMjCC,GACNC,QAAQC,IAAIF,MAfqB,mBAQ9BL,EAR8B,KA+B/BQ,GA/B+B,KAQtBV,KAuBG,SAACW,GACjB,OAAQC,MAAMC,WAAWF,KAAOG,SAASH,KAY3C,OARAI,qBAAU,WAKR,OAJGtB,EAAaD,UACdF,EAAYjB,SAAS,CAAEK,KAAM,QAASC,QAASc,EAAavB,WAC5DW,EAAMc,QAAQC,KAAK,CAAEoB,SAAW,cAE5B,eACJ,CAACvB,IAIH,yBAAKwB,UAAU,OACX,qCACA,6BACE,kBAAC,cAAD,CACEC,SAAS,2EACTC,WAAW,oBACXC,UAjCa,SAACC,GAEtB,GAAIX,EAAUW,EAASC,UAAW,CAChC,IAAIrB,EAAU,iBAAaoB,EAASE,SACpCnB,aAAaC,QAAQ,YAAaJ,GAClCP,EAAgB,CAACF,SAAQ,EAAMtB,SAAS,aA6BlCsD,UAxBY,SAACC,GAAajB,QAAQC,IAAIgB,MA0BxC,4BAAQC,QAAS,SAAAC,GAAC,OAAIzB,EAAM,CAAE0B,UAAW,CAAEC,MAAM,iBAAkBC,SAAS,cAA5E,SACA,mD,kaCtDV,IA2IeC,EA3IY,SAAClD,GAAe,IAAD,EAEQU,mBAAS,CAACC,SAAQ,EAAOtB,SAAS,KAF1C,mBAElC8D,EAFkC,KAEhBC,EAFgB,KAIhCC,EAAS9C,IAAH,KAJ0B,EAuBEG,mBAAS,CAACY,MAAM,GAAIgC,UAAS,EAAMN,MAAM,KAvB3C,mBAuB/BO,EAvB+B,KAuBjBC,EAvBiB,OAwBYC,cAA1CC,EAxB8B,EAwB9BA,SAAUC,EAxBoB,EAwBpBA,aAAcC,EAxBM,EAwBNA,MAAOC,EAxBD,EAwBCA,OAEjCpD,EAAcJ,qBAAWf,GAC3BmB,EAAYrB,eAAgBY,EAAMc,QAAQC,KAAK,KA3Bb,MA6BAC,YAAYqC,EAAQ,CAC1DpC,OAD0D,SACnDC,EADmD,GACvC,IAARC,EAAO,EAAPA,KACT,GAAIoC,EAAaD,SAAU,CACzB,IAAIlC,EAAU,iBAAamC,EAAajC,OACxCC,aAAaC,QAAS,YAAaJ,GACnCgC,EAAqB,CAACzC,SAAQ,EAAMtB,SAAS,eAE1C,CACH,IAAI+B,EAAU,iBAAaD,EAAK2C,OAAOxC,OACvCC,aAAaC,QAAS,YAAaJ,GACnCgC,EAAqB,CAACzC,SAAQ,EAAMtB,SAAS,WAG/CsC,QAAQC,IAAIT,IAEdM,QAf0D,SAelDC,GACRC,QAAQC,IAAIF,MA7C0B,mBA6BhCoC,EA7BgC,YAyEhCjC,GAzEgC,EA6BvBkC,QA7BuB,EA6Bf5C,KA7Be,EA6BV6C,MA4CV,SAAClC,GACf,OAAQC,MAAMC,WAAWF,KAAOG,SAASH,KAgB/C,OAVEI,qBAAU,WAKR,OAJGiB,EAAkBxC,UACnBF,EAAYjB,SAAS,CAAEK,KAAM,QAASC,QAASqD,EAAkB9D,WACjEW,EAAMc,QAAQC,KAAK,CAAEoB,SAAW,cAE5B,eAGJ,CAACgB,IAIL,6BACI,uCACKI,EAAaD,SACX,6BACEC,EAAajC,MACd,0BAAM2C,KAAK,cAAc7B,UAAY,qBAAqB8B,SAAUP,GA1C3D,SAACQ,GAEtBL,EAAO,CAAEf,UAAW,CAClBqB,SAASD,EAASE,gBAClBpB,SAASkB,EAASG,gBAClBjF,SAAS,SACT2D,MAAMO,EAAaP,SAErBrB,QAAQC,IAAIuC,OAmCE,2BAAOtE,KAAK,OAAOoE,KAAK,kBAAkBM,YAAY,wBAAyBC,IAAKd,EAAS,CAAEe,UAAU,EAAMC,UAAW,OACzHb,EAAOQ,iBAAmB,mDAC3B,2BAAOxE,KAAK,WAAWoE,KAAO,kBAAmBM,YAAY,wBAAwBC,IAAKd,EAAS,CAAEe,UAAU,MAC9GZ,EAAOS,iBAAmB,mDAC3B,2BAAOL,KAAK,uBAAuBpE,KAAK,WAAW0E,YAAY,uBAAuBC,IAAKd,EAAS,CAACe,UAAU,EAAME,SAAU,SAAAzE,GAAK,OAAIA,IAAU0D,EAAM,wBACvJC,EAAOe,sBAAwB,qDAChC,2BAAO/E,KAAK,aAGhB,6BACE,6BACE,kBAAC,cAAD,CACAwC,SAAS,2EACTC,WAAW,sBACXC,UA7CS,SAACC,GAChBX,EAAUW,EAASC,WACnBe,EAAgB,CAAClC,MAAMkB,EAASE,QAASY,UAAS,EAAMN,MAAMR,EAASqC,WAAW7B,SA4C5EL,UApCQ,SAACC,GAAajB,QAAQC,IAAIgB,OAsCpC,6BACE,0BAAMqB,KAAK,cAAc7B,UAAY,qBAAqB8B,SAAUP,GAnE5D,SAACQ,GAEvBL,EAAO,CAAEf,UAAU,eAAKoB,EAAN,CAAgB9E,SAAS,aAC3CsC,QAAQC,IAAIuC,OAiEI,2BAAOtE,KAAK,OAAOoE,KAAK,WAAWM,YAAY,wBAAyBC,IAAKd,EAAS,CAAEe,UAAU,EAAMC,UAAW,OAClHb,EAAOO,UAAY,mDACpB,2BAAOvE,KAAK,OAAOoE,KAAM,QAAUM,YAAY,qBAAqBC,IAAKd,EAAS,CAAEe,UAAU,EAAMK,QAAS,8JAC5GjB,EAAOb,OAAS,0DACjB,2BAAOnD,KAAK,WAAWoE,KAAO,WAAYM,YAAY,wBAAwBC,IAAKd,EAAS,CAAEe,UAAU,MACvGZ,EAAOZ,UAAY,mDACpB,2BAAOgB,KAAK,gBAAgBpE,KAAK,WAAW0E,YAAY,uBAAuBC,IAAKd,EAAS,CAACe,UAAU,EAAME,SAAU,SAAAzE,GAAK,OAAIA,IAAU0D,EAAM,iBAChJC,EAAOkB,eAAiB,qDACzB,2BAAOlF,KAAK,gBCtHfmF,EAXU,SAAChF,GAE1B,OADoBK,qBAAWf,GACdF,cAGX,6BACI,yCAJuBY,EAAMc,QAAQC,KAAK,KAAa,O,qSCDnE,IAAMkE,EAAqB1E,IAAH,KASlB2E,EAAqB3E,IAAH,KAUlB4E,EAAyB,SAACnF,GAE9B,IAAMS,EAAcJ,qBAAWf,GAC/BiC,aAAaC,QAAQ,WAAY4D,KAAKC,UAAU5E,IAChD,IAAI6E,EAAkC,WAAzB7E,EAAYpB,SAAwB4F,EAAqBC,EAJ1B,EAKXK,YAASD,GAAlCvB,EALoC,EAKpCA,QAASC,EAL2B,EAK3BA,MAAO7C,EALoB,EAKpBA,KAExB,OAAI4C,EAAgB,yCAChBC,EAAc,oCAIS,WAAzBvD,EAAYpB,SACV,6BACE,2BAAI8B,EAAKqE,iBAAiBxC,QAG5B,6BACE,2BAAI7B,EAAKsE,iBAAiBzC,SAkBnB0C,EAZW,SAAC1F,GACzB,IAAMS,EAAcJ,qBAAWf,GAC/B,OAAKmB,EAAYrB,cAGb,6BACE,sCACCqB,EAAYrB,cAAiB,kBAAC,EAAiBY,GAAY,OALjCA,EAAMc,QAAQC,KAAK,KAAa,O,uBCHlD4E,EA1CQ,SAAC3F,GAEtB,IAAMS,EAAcJ,qBAAWf,GAC/B4C,qBAAU,WACN,IAAM0D,EAAqBR,KAAKS,MAAMtE,aAAauE,QAAQ,aAI3D,OAHGF,GACDnF,EAAYjB,SAAS,CAAEK,KAAM,QAASC,QAAS8F,EAAkBvG,WAE3D,eACR,IAEJ,IAAM0G,EAAS,WACXxE,aAAayE,WAAW,aACxBzE,aAAayE,WAAW,YACxBvF,EAAYjB,SAAS,CAAEK,KAAM,YAG3BoG,EAAwC,WAAzBxF,EAAYpB,SAC7B,kBAAC,eAAD,CACAgD,SAAS,2EACTC,WAAW,SACX4D,gBAAiBH,IAEjB,4BAAQlD,QAAWkD,GAAnB,UAKJ,OACI,6BACI,4BACI,4BAAI,kBAAC,IAAD,CAAMI,GAAK,KAAI,0CACnB,4BAAI,kBAAC,IAAD,CAAMA,GAAK,UAAS,2CACxB,4BAAI,kBAAC,IAAD,CAAMA,GAAK,aAAY,8CAC3B,4BAAI,kBAAC,IAAD,CAAMA,GAAK,YAAW,6CAC1B,4BAAI,kBAAC,IAAD,CAAMA,GAAK,aAAY,gDAEA,IAA9B1F,EAAYrB,cAA0B,iCAAO6G,EAAP,KAAgC,O,gCC1B7EG,EAAW,IAAIC,IAAS,CAAEC,IAAK,0BAE/BC,EAAW,IAAIC,KAAW,SAACC,EAAWC,GAC1C,IAAMpF,EAAQC,aAAauE,QAAQ,aAMnC,OALAW,EAAUE,WAAW,CACnBC,QAAS,CACPC,cAAevF,EAAK,iBAAaA,GAAU,MAGxCoF,EAAQD,MAcXK,EAAe,IAAIC,IAAa,CACpCC,KAAMT,EAASU,OAAOb,GACtBc,MAAO,IAAIC,IACXC,eAdyB,CACzBC,WAAY,CACVC,YAAa,eACbC,YAAa,OAEfjC,MAAO,CACLgC,YAAa,eACbC,YAAa,UA4BFC,EAlBO,WAElB,OACI,kBAAC,IAAD,CAAgBC,OAAQX,GACtB,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,IAAIC,UAAWxH,IACjC,kBAAC,IAAD,CAAOsH,OAAK,EAACC,KAAK,SAASC,UAAWpH,IACtC,kBAAC,IAAD,CAAOkH,OAAK,EAACC,KAAK,YAAYC,UAAW1E,IACzC,kBAAC,IAAD,CAAOwE,OAAK,EAACC,KAAK,YAAYC,UAAW5C,IACzC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,WAAWC,UAAWlC,QC5ClCmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98702205.chunk.js","sourcesContent":["import React, {createContext, useReducer} from 'react';\n\nconst initialState = { authenticated:false, authType:null};\n\nconst store = createContext({\n  ...initialState,\n  dispatch: (action: any) => {}\n});\nconst {Provider} = store;\n\n\nconst reducers = (state:any, action:any) => {\n  switch(action.type) {\n    case 'LOGIN': return {       \n      ...state,\n      authenticated:true,\n      authType:action.payload   \n    }      \n    case 'LOGOUT': return {       \n      ...state,\n      authenticated:false,\n      authType: null  \n    }\n    default:\n      return state;\n  };\n}\n\n\nconst StateProvider:React.FC = (props) => { \n  const [state, dispatch] = useReducer(reducers, initialState);\n  \n  return <Provider value={{ authenticated:state.authenticated, authType: state.authType, dispatch }}>{props.children}</Provider>;\n};\n\nexport { store, StateProvider }","import React, {useContext} from 'react';\nimport { store } from '../context/store';\n\n\nconst Home: React.FC = (props:any) => {  \n  const globalState = useContext(store);\n \n     \n    return (      \n        <div>\n            <p>Home</p>  \n        </div>\n    );\n  }\n  \n  export default Home;","import React, {useState, useContext, useEffect} from 'react';\nimport {GoogleLogin, GoogleLogout} from 'react-google-login';\nimport { store } from '../context/store';\nimport {useMutation} from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nconst Login:React.FC  = (props:any) => {  \n \n  const globalState = useContext(store);   \n\n  const [loginSuccess, setLoginSuccess] = useState({success:false, authType:\"\"});\n  if (globalState.authenticated) {props.history.push(\"/\")}  \n  \n\n  const [login, {data}] = useMutation(LOGIN, {\n    update(_, {data}) {\n      let tokenToSet = `Manual_${data.login.token}`\n      localStorage.setItem( \"jwt_token\", tokenToSet)\n      setLoginSuccess({success:true, authType:\"manual\"});\n    },\n    onError(err) {\n      console.log(err)\n    }\n  });\n  \n  const responseGoogle = (response:any) => {\n  \n    if (isNumeric(response.googleId)) {      \n      let tokenToSet = `Google_${response.tokenId}`\n      localStorage.setItem(\"jwt_token\", tokenToSet);    \n      setLoginSuccess({success:true, authType:\"google\"});     \n    }\n  }\n\n\n  const failureGoogle = (res:any) => {console.log(res)};\n\n  const isNumeric = (n:any) => {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }  \n\n\n  useEffect(() => { \n    if(loginSuccess.success)  {\n      globalState.dispatch({ type: 'LOGIN', payload: loginSuccess.authType});\n      props.history.push({ pathname : '/profile'});\n    }\n    return() => {}\n    },[loginSuccess])    \n\n  return (\n    \n    <div className=\"App\">\n        <h1>LOGIN</h1> \n        <div>\n          <GoogleLogin\n            clientId=\"118933481211-a6k3dqiuk0l1jv69kbkm89m79rc765vn.apps.googleusercontent.com\"\n            buttonText=\"LOGIN WITH GOOGLE\"\n            onSuccess={responseGoogle}\n            onFailure={failureGoogle}\n          />\n          <button onClick={e => login({ variables: { email:\"ayra@email.com\", password:\"secret\" } })}>Login</button>\n          <p>Not authenticated</p>\n        </div>\n      </div>\n  );\n}\n\n\nconst LOGIN = gql`\n  mutation login(\n    $email:String!\n    $password:String!\n  ){\n    login(\n      loginInput: {\n        email:$email\n        password:$password\n      }\n    ) {\n      token\n    }\n  }\n\n`;\n\nexport default Login;\n","import React, {useState, useContext, useEffect} from 'react';\nimport {GoogleLogin, GoogleLogout} from 'react-google-login';\nimport { store } from '../context/store';\nimport { useForm } from \"react-hook-form\";\nimport {useMutation} from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport './Register.scss';\n\nconst Register:React.FC  = (props:any) => { \n  \n  const[registeredSuccess,setRegisteredSuccess] = useState({success:false, authType:\"\"});\n  \n    const SIGNUP = gql`\n    mutation signUp(\n      $email:String!\n      $username:String!\n      $password:String!\n      $authType:String!\n    ){\n      signUp(\n        registerInput: {\n          username:$username\n          email:$email\n          password:$password\n          authType:$authType\n        }\n      ) {\n        token\n      }\n    }`;\n\n    const [googleStatus, setGoogleStatus] = useState({token:\"\", acquired:false,email:\"\"});\n    const { register, handleSubmit, watch, errors } = useForm();       \n\n    const globalState = useContext(store);   \n    if (globalState.authenticated) {props.history.push(\"/\")}\n\n   const [signUp, {loading,data,error}] = useMutation(SIGNUP, {     \n    update(_, {data}) {\n      if (googleStatus.acquired) {\n        let tokenToSet = `Google_${googleStatus.token}`\n        localStorage.setItem( \"jwt_token\", tokenToSet);\n        setRegisteredSuccess({success:true, authType:\"google\"});    \n      }\n      else {\n        let tokenToSet = `Manual_${data.signUp.token}`\n        localStorage.setItem( \"jwt_token\", tokenToSet);\n        setRegisteredSuccess({success:true, authType:\"manual\"});    \n      }    \n      \n      console.log(data);\n    },\n    onError(err) {\n    console.log(err)\n    }\n});\n\n   const onSubmitManual = (formData:any) => {\n\n    signUp({ variables: {...formData, authType:\"manual\"} });\n    console.log(formData);\n  }; \n\n  const onSubmitGoogle = (formData:any) => {\n\n    signUp({ variables: {\n      username:formData.google_username, \n      password:formData.google_password,\n      authType:\"google\",\n      email:googleStatus.email\n    } });\n    console.log(formData);\n  }; \n\n\n    const responseGoogle = (response:any) => {  \n        if (isNumeric(response.googleId)) { \n            setGoogleStatus({token:response.tokenId, acquired:true, email:response.profileObj.email}); \n        }\n    }\n\n    const isNumeric = (n:any) => {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }  \n\n    const failureGoogle = (res:any) => {console.log(res)};\n\n\n    useEffect(() => { \n      if(registeredSuccess.success)  {\n        globalState.dispatch({ type: 'LOGIN', payload: registeredSuccess.authType});\n        props.history.push({ pathname : '/profile'});\n      }\n      return() => {\n\n      }\n      },[registeredSuccess])    \n\n  return (\n    \n    <div>\n        <h1>SIGN UP</h1>      \n            {googleStatus.acquired ? \n              (<div>\n                {googleStatus.token}\n                <form name=\"form-google\" className = \"google-signup-form\" onSubmit={handleSubmit(onSubmitGoogle)}>\n                  <input type=\"text\" name=\"google_username\" placeholder=\"insert valid username\"  ref={register({ required: true, maxLength: 15 })} ></input>\n                  {errors.google_username && <p>username is required</p>}\n                  <input type=\"password\" name = \"google_password\"  placeholder=\"insert valid password\" ref={register({ required: true })} ></input>\n                  {errors.google_password && <p>password is required</p>}\n                  <input name=\"google_passwordmatch\" type=\"password\" placeholder=\"passwords must match\" ref={register({required: true, validate: value => value === watch(\"google_password\")})}/>\n                  {errors.google_passwordmatch && <p>passwords do not match</p>}\n                  <input type=\"submit\" ></input>\n                </form>\n              </div>) : (\n              <div>\n                <div>\n                  <GoogleLogin\n                  clientId=\"118933481211-a6k3dqiuk0l1jv69kbkm89m79rc765vn.apps.googleusercontent.com\"\n                  buttonText=\"SIGN UP WITH GOOGLE\"\n                  onSuccess={responseGoogle}\n                  onFailure={failureGoogle}/>  \n                </div>\n                <div>\n                  <form name=\"form-manual\" className = \"manual-signup-form\" onSubmit={handleSubmit(onSubmitManual)}>\n                    <input type=\"text\" name=\"username\" placeholder=\"insert valid username\"  ref={register({ required: true, maxLength: 15 })} ></input>\n                    {errors.username && <p>username is required</p>}                  \n                    <input type=\"text\" name =\"email\"   placeholder=\"insert valid email\" ref={register({ required: true, pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,})}></input>\n                    {errors.email && <p>please insert a valid email</p>}\n                    <input type=\"password\" name = \"password\"  placeholder=\"insert valid password\" ref={register({ required: true })} ></input>\n                    {errors.password && <p>password is required</p>}\n                    <input name=\"passwordmatch\" type=\"password\" placeholder=\"passwords must match\" ref={register({required: true, validate: value => value === watch(\"password\")})}/>\n                    {errors.passwordmatch && <p>passwords do not match</p>}\n                    <input type=\"submit\" ></input>\n                  </form>\n                </div>                \n              </div>\n            )\n            }      \n      \n      </div>\n  );\n}\n\n\n\n\nexport default Register;\n","import React, {useContext} from 'react';\nimport { store } from '../context/store';\n\n\nconst Discover: React.FC = (props:any) => {  \n  const globalState = useContext(store);\n  if (!globalState.authenticated) {props.history.push(\"/\"); return null;}\n     \n    return (      \n        <div>\n            <p>Discover</p>  \n        </div>\n    );\n  }\n  \n  export default Discover;\n  ","import React, {useContext} from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport  gql  from 'graphql-tag';\nimport { store } from '../context/store';\n\nconst GET_PROFILE_MANUAL = gql`\n  {\n    getProfileManual {\n      email\n      username\n    }\n  }\n`;\n\nconst GET_PROFILE_GOOGLE = gql`\n  {\n    getProfileGoogle {\n      name\n      email\n      picture\n    }\n  }\n`;\n\nconst ProfileData: React.FC  = (props:any) => {\n\n  const globalState = useContext(store);\n  localStorage.setItem(\"appState\", JSON.stringify(globalState));\n  let query =  globalState.authType === \"manual\" ? GET_PROFILE_MANUAL : GET_PROFILE_GOOGLE;\n  const { loading, error, data } = useQuery(query);\n  \n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error</p>; \n\n\n  return (\n    globalState.authType === \"manual\" ? (    \n      <div>\n        <p>{data.getProfileManual.email}</p>\n      </div>    \n    ):(\n      <div>\n        <p>{data.getProfileGoogle.email}</p>\n      </div>  \n    )\n  )    \n}\n\nconst Profile: React.FC = (props:any)  => {  \n  const globalState = useContext(store);\n  if (!globalState.authenticated) {props.history.push(\"/\"); return null;}   \n  \n  return (      \n      <div>  \n        <p>Profile</p>  \n        {globalState.authenticated ? (<ProfileData  {...props} />):(null) }\n      </div>\n  );\n}\n\nexport default Profile;\n","import React, {useEffect, useContext} from 'react';\nimport {Link} from \"react-router-dom\";\nimport { store } from '../context/store';\nimport {GoogleLogout} from 'react-google-login';\n\nconst Navbar: React.FC = (props:any) => { \n    \n    const globalState = useContext(store); \n    useEffect(() => {    \n        const persistedAppState =  JSON.parse(localStorage.getItem(\"appState\") as string);\n        if(persistedAppState) {  \n          globalState.dispatch({ type: 'LOGIN', payload: persistedAppState.authType });      \n        }\n        return  () => {}\n      },[])  \n\n    const logout = () => {  \n        localStorage.removeItem(\"jwt_token\");\n        localStorage.removeItem(\"appState\");\n        globalState.dispatch({ type: 'LOGOUT' })\n      }\n\n    const logoutButton = globalState.authType === \"google\" ? (\n        <GoogleLogout\n        clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n        buttonText=\"Logout\"\n        onLogoutSuccess={logout}/>\n      ):(\n        <button onClick = {logout}>Logout</button>\n      )\n\n\n         \n    return (      \n        <nav>\n            <ul>\n                <li><Link to = \"/\"><button>Home</button></Link></li>\n                <li><Link to = \"/login\"><button>Login</button></Link></li>\n                <li><Link to = \"/register\"><button>Register</button></Link></li>\n                <li><Link to = \"/profile\"><button>Profile</button></Link></li>\n                <li><Link to = \"/discover\"><button>Discover</button></Link></li>                \n            </ul>\n            {globalState.authenticated === true ? (<div> {logoutButton} </div> ) : null}\n        </nav>\n    );\n  }\n  \n  export default Navbar;\n  ","import React from 'react';\nimport './App.scss';\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Discover from \"./pages/Discover\";\nimport Profile from \"./pages/Profile\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport Navbar from \"./components/Navbar\";\nimport  ApolloClient from 'apollo-client';\nimport  {InMemoryCache} from 'apollo-cache-inmemory';\nimport {HttpLink} from \"apollo-link-http\";\nimport {ApolloLink} from \"apollo-link\";\nimport {StateProvider} from \"./context/store\";\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' });\n\nconst authLink = new ApolloLink((operation, forward) => {  \n  const token = localStorage.getItem('jwt_token');\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  });\n  return forward(operation);\n});\n\nconst defaultOptions:any = {\n  watchQuery: {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all',\n  },\n  query: {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all',\n  },\n}\n\nconst apolloClient = new ApolloClient({  \n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  defaultOptions: defaultOptions\n});\n\nconst App: React.FC = () => {\n  \n    return (      \n        <ApolloProvider client={apolloClient}>  \n          <StateProvider>\n            <HashRouter>\n              <Navbar/>\n              <Route exact path=\"/\" component={Home}></Route>\n              <Route exact path=\"/login\" component={Login}></Route>\n              <Route exact path=\"/register\" component={Register}></Route>\n              <Route exact path=\"/discover\" component={Discover}></Route>\n              <Route exact path=\"/profile\" component={Profile}></Route>\n            </HashRouter>      \n          </StateProvider> \n        </ApolloProvider>           \n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}